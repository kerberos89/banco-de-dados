
IF OBJECT_ID('MENSAGEM', 'U') IS NOT NULL
	DROP TABLE MENSAGEM
IF OBJECT_ID('ENTREGA', 'U') IS NOT NULL
	DROP TABLE ENTREGA
IF OBJECT_ID('ATIVIDADE_VINCULADA', 'U') IS NOT NULL
	DROP TABLE ATIVIDADE_VINCULADA
IF OBJECT_ID('ATIVIDADE', 'U') IS NOT NULL
	DROP TABLE ATIVIDADE
IF OBJECT_ID('SOLICITACAO_MATRICULA', 'U') IS NOT NULL
	DROP TABLE SOLICITACAO_MATRICULA
IF OBJECT_ID('DISCIPLINA_OFERTADA', 'U') IS NOT NULL
	DROP TABLE DISCIPLINA_OFERTADA
IF OBJECT_ID('CURSO', 'U') IS NOT NULL
	DROP TABLE CURSO
IF OBJECT_ID('DISCIPLINA', 'U') IS NOT NULL
	DROP TABLE DISCIPLINA
IF OBJECT_ID('PROFESSOR', 'U') IS NOT NULL
	DROP TABLE PROFESSOR
IF OBJECT_ID('ALUNO', 'U') IS NOT NULL
	DROP TABLE ALUNO
IF OBJECT_ID('COORDENADOR', 'U') IS NOT NULL
	DROP TABLE COORDENADOR
IF OBJECT_ID('USUARIO', 'U') IS NOT NULL
	DROP TABLE USUARIO
 
CREATE TABLE USUARIO(
	ID INT IDENTITY PRIMARY KEY,
	LOGIN VARCHAR(50) UNIQUE,
	SENHA VARCHAR(50) NOT NULL,
	DT_EXPIRACAO DATETIME DEFAULT ('1900-01-01')
);

CREATE TABLE COORDENADOR(
	ID INT IDENTITY PRIMARY KEY,
	ID_USUARIO INT FOREIGN KEY REFERENCES USUARIO(ID) NOT NULL,
	NOME VARCHAR(100) NOT NULL,
	EMAIL VARCHAR(100) UNIQUE NOT NULL,
	CELULAR VARCHAR(20) UNIQUE NOT NULL
);

CREATE TABLE ALUNO(
	ID INT IDENTITY PRIMARY KEY,
	ID_USUARIO INT FOREIGN KEY REFERENCES USUARIO(ID) NOT NULL,
	NOME VARCHAR(100) NOT NULL,
	EMAIL VARCHAR(100) UNIQUE NOT NULL,
	CELULAR VARCHAR(20) UNIQUE NOT NULL,
	RA VARCHAR(50) NOT NULL,
	FOTO VARCHAR(500)
);

CREATE TABLE PROFESSOR(
	ID INT IDENTITY PRIMARY KEY,
	ID_USUARIO INT FOREIGN KEY REFERENCES USUARIO(ID) NOT NULL,
	NOME VARCHAR(100) NOT NULL,
	EMAIL VARCHAR(100) UNIQUE NOT NULL,
	CELULAR VARCHAR(20) UNIQUE NOT NULL,
	APELIDO VARCHAR(50) NOT NULL
);

CREATE TABLE DISCIPLINA(
	ID INT IDENTITY PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL UNIQUE,
	DATA DATETIME NOT NULL DEFAULT (GETDATE()),
	STATUS VARCHAR(10) NOT NULL DEFAULT('ABERTA') CHECK( STATUS IN ('ABERTA', 'FECHADA') ),
	PLANO_DE_ENSINO VARCHAR(500) NOT NULL,
	CARGA_HORARIA INT NOT NULL CHECK( CARGA_HORARIA IN (40, 80) ),
	COMPETENCIAS VARCHAR(500) NOT NULL,
	HABILIDADES VARCHAR(500) NOT NULL,
	EMENTA VARCHAR(500) NOT NULL,
	CONTEUDO_PROGRAMATICO VARCHAR(500) NOT NULL,
	BIBLIOGRAFIA_BASICA VARCHAR(500) NOT NULL,
	BIBLIOGRAFIA_COMPLEMENTAR VARCHAR(500) NOT NULL,
	PERCENTUAL_PRATICO INT NOT NULL CHECK( PERCENTUAL_PRATICO >= 0 AND PERCENTUAL_PRATICO <= 100 ),
	PERCENTUAL_TEORICO INT NOT NULL CHECK( PERCENTUAL_TEORICO >= 0 AND PERCENTUAL_TEORICO <= 100 ),
	ID_COORDENADOR INT FOREIGN KEY REFERENCES COORDENADOR(ID) NOT NULL,
);

CREATE TABLE CURSO(
	ID INT IDENTITY PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE DISCIPLINA_OFERTADA(
	ID INT IDENTITY PRIMARY KEY,
	ID_COORDENADOR INT FOREIGN KEY REFERENCES COORDENADOR(ID) NOT NULL,
	DT_INICIO_MATRICULA DATETIME,
	DT_FIM_MATRICULA DATETIME,
	ID_DISCIPLINA INT FOREIGN KEY REFERENCES DISCIPLINA(ID) NOT NULL,
	ID_CURSO INT FOREIGN KEY REFERENCES CURSO(ID) NOT NULL,
	ANO INT NOT NULL CHECK( ANO >= 1900 AND ANO <= 2100 ),
	SEMESTRE INT NOT NULL CHECK( SEMESTRE IN (1, 2) ),
	TURMA VARCHAR(1) NOT NULL CHECK( TURMA LIKE ( '[A-Z]' ) ),
	ID_PROFESSOR INT FOREIGN KEY REFERENCES PROFESSOR(ID),
	METODOLOGIA VARCHAR(500),
	RECURSOS VARCHAR(500),
	CRITERIO_AVALIACAO VARCHAR(500),
	PLANO_DE_AULAS VARCHAR(500),
	CONSTRAINT UQ_OFERTA UNIQUE ( ID_CURSO, ANO, SEMESTRE, TURMA )
);

CREATE TABLE SOLICITACAO_MATRICULA(
	ID INT IDENTITY PRIMARY KEY,
	ID_ALUNO INT FOREIGN KEY REFERENCES ALUNO(ID) NOT NULL,
	ID_DISCIPLINA_OFERTADA INT FOREIGN KEY REFERENCES DISCIPLINA_OFERTADA(ID) NOT NULL,
	DT_SOLICITACAO DATETIME NOT NULL DEFAULT (GETDATE()),
	ID_COORDENADOR INT FOREIGN KEY REFERENCES COORDENADOR(ID),
	STATUS VARCHAR(20) DEFAULT('SOLICITADA') CHECK( STATUS IN ('SOLICITADA', 'APROVADA', 'REJEITADA', 'CANCELADA') )

);

CREATE TABLE ATIVIDADE(
	ID INT IDENTITY PRIMARY KEY,
	TITULO VARCHAR(100) NOT NULL UNIQUE,
	DESCRICAO VARCHAR(500),
	CONTEUDO VARCHAR(100) NOT NULL,
	TIPO VARCHAR(20) NOT NULL CHECK ( TIPO IN ('RESPOSTA ABERTA', 'TESTE') ),
	EXTRAS VARCHAR(100),
	ID_PROFESSOR INT FOREIGN KEY REFERENCES PROFESSOR(ID) NOT NULL,
);

CREATE TABLE ATIVIDADE_VINCULADA(
	ID INT IDENTITY PRIMARY KEY,
	ID_ATIVIDADE INT FOREIGN KEY REFERENCES ATIVIDADE(ID) NOT NULL,
	ID_PROFESSOR INT FOREIGN KEY REFERENCES PROFESSOR(ID) NOT NULL,
	ID_DISCIPLINA_OFERTADA INT FOREIGN KEY REFERENCES DISCIPLINA_OFERTADA(ID) NOT NULL,
	ROTULO VARCHAR(50) NOT NULL,
	STATUS VARCHAR(50) NOT NULL CHECK( STATUS IN ('DISPONIBILIZADA','ABERTA','FECHADA','ENCERRADA','PRORROGADA') ),
	CONSTRAINT UQ_ATIVIDADE UNIQUE ( ID_ATIVIDADE, ID_DISCIPLINA_OFERTADA, ROTULO )
);

CREATE TABLE ENTREGA(
	ID INT IDENTITY PRIMARY KEY,
	ID_ALUNO INT FOREIGN KEY REFERENCES ALUNO(ID) NOT NULL,
	ID_ATIVIDADE_VINCULADA INT FOREIGN KEY REFERENCES ATIVIDADE_VINCULADA(ID) NOT NULL,
	TITULO VARCHAR(50) NOT NULL,
	RESPOSTA VARCHAR(500) NOT NULL,
	DT_ENTREGA DATETIME NOT NULL DEFAULT (GETDATE()),
	STATUS VARCHAR(50) NOT NULL DEFAULT('ENTREGUE') CHECK( STATUS IN ('ENTREGUE','CORRIGIDO') ),
	ID_PROFESSOR INT FOREIGN KEY REFERENCES PROFESSOR(ID),
	NOTA DECIMAL(4,2) CHECK( NOTA >= 0 AND NOTA <= 10 ),
	DT_AVALIACAO DATETIME,
	OBS VARCHAR(500),
	CONSTRAINT UQ_ENTREGA UNIQUE ( ID_ALUNO, ID_ATIVIDADE_VINCULADA )
);

CREATE TABLE MENSAGEM(
	ID INT IDENTITY PRIMARY KEY,
	ID_ALUNO INT FOREIGN KEY REFERENCES ALUNO(ID) NOT NULL,
	ID_PROFESSOR INT FOREIGN KEY REFERENCES PROFESSOR(ID) NOT NULL,
	ASSUNTO VARCHAR(50) NOT NULL,
	REFERENCIA VARCHAR(50) NOT NULL,
	CONTEUDO VARCHAR(500) NOT NULL,
	STATUS VARCHAR(50) NOT NULL DEFAULT('ENVIADO') CHECK( STATUS IN ('ENVIADO','LIDO', 'RESPONDIDO') ),
	DT_ENVIO DATETIME NOT NULL DEFAULT (GETDATE()),
	DT_REPOSTA DATETIME,
	RESPOSTA VARCHAR(500)
);

-- AC6 --- DEVERÁ SER ENTREGUE HOJE E EM UM ÚNICO SCRIPT

--USUARIO
INSERT INTO USUARIO([LOGIN], SENHA, DT_EXPIRACAO)
VALUES('FELIPE.MELO', '654321', '2018/06/01');

--Coordenador
INSERT INTO Coordenador(ID_USUARIO, NOME, EMAIL, CELULAR)
VALUES(1, 'Felipe Melo', 'felipe.melo@gmail.com', '11 9999-0000')

--PROFESSOR
INSERT INTO PROFESSOR(ID_USUARIO, NOME, EMAIL, CELULAR, APELIDO)
VALUES(1, 'FELIPE MELO', 'felipe.melo@gmail.com', '11 9-0000-5555', 'Fipe')

--Disciplina
INSERT INTO Disciplina(NOME, [DATA], [STATUS], PLANO_DE_ENSINO, CARGA_HORARIA, COMPETENCIAS, HABILIDADES, EMENTA, CONTEUDO_PROGRAMATICO, BIBLIOGRAFIA_BASICA, BIBLIOGRAFIA_COMPLEMENTAR, PERCENTUAL_PRATICO, PERCENTUAL_TEORICO, ID_COORDENADOR)
VALUES('Comunicação e Expressão', '2018/01/01', 'Aberta', 'Linguagem, língua e fala. Funções da linguagem. Oralidade, escrita e variação linguística. Leitura e estratégias de leitura. Escrita e estratégias de escrita. Paragrafação. Coesão e coerência textuais. Paráfrase e retextualização. Argumentação e persuasão. Particularidades léxicas e gramaticais.', 80, '
1. usar a língua em suas manifestações orais e escritas, em suas dimensões receptivas e produtivas, em diferentes situações ou contextos, com diversos interlocutores ou públicos, como meio de organização cognitiva da realidade, constituição de significados e realização de práticas sociais;
2. ser ético, pontual e comprometido com a disciplina de Comunicação e Expressão. ', 'Ler, escrever e falar', 'Linguagem, língua e fala. Funções da linguagem. Oralidade, escrita e variação linguística. Leitura e estratégias de leitura. Escrita e estratégias de escrita. Paragrafação. Coesão e coerência textuais. Paráfrase e retextualização. Argumentação e persuasão. Particularidades léxicas e gramaticais.', '
1. Critérios de avaliação oral, 2. Critérios de avaliação escrita', 'SAVIOLI, Francisco Platão. Gramática em 44 lições. 15. Ed. São Paulo: Ática, 1998.
FARACO, Carlos Roberto e TEZZA, Cristóvão. Prática de Texto: para estudantes Universitários. 17. ed. Rio de Janeiro: Vozes, 2008.', 'BASTOS, Lucia Kopschitz. A Produção escrita e a gramática. 2. ed. São Paulo: Martins Fontes, 1992.
SAVIOLI, Francisco Platão. Gramática em 44 lições. 15. Ed. São Paulo: Ática, 1998.
FARACO, Carlos Roberto e TEZZA, Cristóvão. Prática de Texto: para estudantes Universitários. 17. ed. Rio de Janeiro: Vozes, 2008. ', 0, 100, 1)

--CURSO
INSERT INTO CURSO(NOME)
VALUES('Matemática')

-- DisciplinaOfertada
INSERT INTO Disciplina_Ofertada (ID_COORDENADOR, DT_INICIO_MATRICULA, DT_FIM_MATRICULA, ID_DISCIPLINA, ID_CURSO, ANO, SEMESTRE, TURMA, ID_PROFESSOR, METODOLOGIA, RECURSOS, CRITERIO_AVALIACAO, PLANO_DE_AULAS)
VALUES(1, '2018/01/01', '2018/12/12', 1, 1, 2018, 1, 'A', 1, 'Prática', 'Computadores', 'Prova e Exercicios', 'Programação')

--ALUNO
INSERT INTO ALUNO(ID_USUARIO, NOME, email, CELULAR, RA, FOTO)
VALUES(1, 'Felipe Melo', 'felipe.melo@gmail.com', '11 9-9999-0000', '1000','/foto/1000.jpg')

--Atividade
INSERT INTO ATIVIDADE(TITULO, DESCRICAO, CONTEUDO, TIPO, EXTRAS, ID_PROFESSOR)
VALUES('AC1', 'Criar DDL', 'Crie o DDL', 'TESTE',  'Verificar anexos', 1)

--Atividade_Vinculada
INSERT INTO Atividade_Vinculada(ID_ATIVIDADE, ID_PROFESSOR, ID_DISCIPLINA_OFERTADA, ROTULO, [STATUS])
VALUEs(1,1,1,'Atividade','ABERTA')

--Solicitacao_Matricula
INSERT INTO Solicitacao_Matricula(id_aluno, ID_DISCIPLINA_OFERTADA, DT_SOLICITACAO, ID_COORDENADOR, [STATUS])
VALUES(1, 1, '2018/01/01', 1, 'APROVADA')

--Entrega
INSERT INTO Entrega(ID_ALUNO, ID_ATIVIDADE_VINCULADA, TITULO, RESPOSTA, DT_ENTREGA, [STATUS], ID_PROFESSOR, NOTA, DT_AVALIACAO, OBS)
VALUES(1, 1, 'AC1 - DDL', 'SELECT', '2018/01/01', 'ENTREGUE', 1, 10, '2018/01/10', 'Verifique a AC')

--mensagem
INSERT INTO MENSAGEM()


-- 2. CRIE UM USUARIO COM LOGIN 'EMILIO.MURTA' E SENHA '123456'
INSERT INTO USUARIO (LOGIN, SENHA)
VALUES('EMILIO.MURTA', '123456')

-- 3. ATUALIZE A DT_EXPIRACAO DO USUARIO PARA O DIA DE HOJE E A SENHA PARA '654321'
UPDATE USUARIO SET DT_EXPIRACAO = GETDATE()
WHERE [LOGIN] = 'EMILIO.MURTA'

-- 4. CRIE UM PROFESSOR PARA O USUARIO CRIADO (UTILIZE UM SELECT PARA DESCOBRIR O ID DO USUARIO CRIADO)
INSERT INTO PROFESSOR(ID_USUARIO, NOME, EMAIL, CELULAR, APELIDO)
VALUES(2, 'Emilio Murta', 'emilio.murta@gmail.com', '11 9-2425-2655', 'Murta')

-- 5. GARANTA A EXISTENCIA DE APENAS TRES DISCIPLINAS: 'LP', 'BD2' E 'ESTATISTICA' -- TODAS COM STATUS ABERTA
-- 6. CRIE DOIS CURSOS 'SI' E 'ADS' (FAÇA ISSO EM APENAS UMA INSTRUCAO)
-- 7. OFERECA TODAS AS DISCIPLINAS EM TODOS OS CURSOS (FAÇA ISSO USANDO INSERT COM SELECT)
	-- DICA: SELECT * FROM CURSO, DISCIPLINA RETORNA O PRODUTO CARTESIANO DAS DUAS RELAÇÕES
	-- DICA2: O SELECT ABAIXO UTILIZA ROW_NUMBER PARA TRAZER O NRO DE CADA LINHA (PODE SER UTIL)
		--SELECT ROW_NUMBER() OVER(ORDER BY TABLE_NAME),--
		--	TABLE_NAME 
		--FROM INFORMATION_SCHEMA.TABLES
-- 8. ATUALIZE O PROFESSOR DE TODAS AS DISCIPLINAS OFERTADAS PARA O PROFESSOR CRIADO (EMILIO.MURTA) -- UTILIZE UPDATE COM SUBSELECT
-- 9. CRIE MAIS 9 ALUNOS (FACA ISSO EM UMA INSTRUCAO APENAS)
INSERT INTO ALUNO (NOME, EMAIL, CELULAR, RA, FOTO)
VALUES 
('Julia', 'julia@gmail.com', '995688154', '130054', 'documentos/foto45496'),
('Anderson', 'anderson@gmail.com', '995682154', '1300548', 'documentos/foto45674'),
('Aderlandia', 'aderlandia@gmail.com', '95659899', '130545', 'documentos/foto5452'),
('Guilherme', 'guilherme@gmail.com', '9925657874', '130004', 'documentos/foto5465'),
('Aureo', 'aureo@gmail.com', '99565721', '1300548', 'documentos/foto54524'),
('Calebe', 'calebe@gmail.com', '99565875', '13000464', 'documentos/foto45465'),
('Beatriz', 'beatriz@gmail.com', '991545745', '13052154', 'documentos/foto5465'), 
('Felipe', 'felipe@gmail.com', '995454215', '130021', 'documentos/foto9283'),
('Nadia', 'nadia@gmail.com', '99445465', '130054', 'documentos/foto938')

-- 10. CRIE UMA SOLICITACAO DE MATRICULA PARA OS PRIMEIROS 5 ALUNOS NO PRIMEIRO CURSO (TODAS AS DISCIPLINAS) -- UTILIZE INSERT COM SELECT
INSERT INTO SOLICITACAO_MATRICULA (ID_ALUNO)
VALUES (SELECT ID_ALUNO FROM ALUNO ORDER BY ID_ALUNO OFFSET TOP 5)

-- 11. CRIE UMA SOLICITACAO DE MATRICULA PARA OS ULTIMOS 5 ALUNOS NO SEGUNDO CURSO (TODAS AS DISCIPLINAS) -- UTILIZE INSERT COM SELECT
	-- DICA: ORDER BY <ALGUMA_COISA> OFFSET 10 ROWS FETCH NEXT 5 ROWS ONLY; 
	-- ESSE COMANDO INSERIDO NO FINAL DO SELECT VAI DESPREZAR AS 10 PRIMEIRAS LINHAS E TRARÁ AS PRÓXIMAS 5
INSERT INTO SOLICITACAO_MATRICULA (ID_ALUNO)
VALUES (SELECT ID_ALUNO FROM ALUNO ORDER BY ID_ALUNO OFFSET 5 ROWS FETCH NEXT 5 ROWS ONLY)

-- 12. CRIE 3 ATIVIDADES NOVAS (UMA PARA CADA DISCIPLINA)
INSERT INTO ATIVIDADE (TITULO, DESCRICAO, CONTEUDO, TIPO, EXTRAS) VALUES 
('Ativade 1', 'Fazer de acordo com exercicio passado anterior de Estatística', 'Estatística e Lógica', 'Teste', 'Não tem'), 
('Atividade 2', 'Resolva problema usando dicionário em Python', 'Linguagem de Programação', 'Teste', 'Não tem'), 
('Atividade 3', 'Crie scripts de acordo com a modelagem', 'Conceitos de Banco de Dados', 'LIVRE', 'Ponto extra')

-- 13. VINCULE CADA ATIVIDADE EM SUA DISCIPLINA OFERTADA (UMA POR CURSO) E UTILIZANDO O PROFESSOR (EMILIO.MURTA) PARA CADA ATIVIDADE VINCULADA 
		-- DEVERÃO SER GERADAS 2 ATIVIDADES_VINCULADAS PARA CADA ATIVIDADE POIS TEMOS CADA DISCIPLINA OFERTADA EM CADA CURSO EM UM TOTAL DE 2 CURSOS
		-- FACA ESSE PROCESSO MANUALMENTE (SEM UTILIZAR INSERT COM SELECT) -- CUIDADO COM OS IDS, SE ERRAR NA INSERÇÃO FAÇA TRUNCATE DAS TABELAS 
		-- OU DROP E CRIE NOVAMENTE
-- 14. CRIE UMA ENTREGA PARA CADA ALUNO PARA CADA ATIVIDADE (OS ALUNOS QUE ENTREGAREM DEVEM ESTAR MATRICULADOS NA DISCIPLINA OFERTADA)
		-- PODE FAZER MANUALMENTE OU USANDO INSERT COM SELECT
-- 15. INSIRA UMA MENSAGEM DE UM PROFESSOR QUALQUER PARA UM ALUNO QUALQUER -- FACA INSERT MANUAL (SEM INSERT COM SELECT)
-- 16. ATUALIZE AS NOTAS DE TODOS OS ALUNOS QUE O NOME COMEÇA COM A LETRA 'A' PARA 7
-- 17. ATUALIZE A DATA DE INICIO DE TODAS AS DISCIPLINAS OFERTADAS PARA O DIA DE HOJE
-- 18. ATUALIZE A DATA DE FIM DE TODAS AS DISCIPLINAS OFERTADAS PARA O DIA DE HOJE + 7 DIAS
-- 19. CRIE UM SCRIPT PARA APAGAR TODOS OS REGISTROS INSERIDOS EM TODAS AS TABELAS (CUIDADO COM A ORDEM DE EXECUÇÃO POR CONTA DAS FKS)
-- 20. APLIQUE NOVAMENTE TODOS OS PROCEDIMENTOS ANTERIORES ATÉ O PASSO 18 GARANTINDO QUE TERÃO OS MESMOS IDS
